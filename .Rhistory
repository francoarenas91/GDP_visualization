filter(unit=="EUR_HAB") %>%
filter(na_item=="B5N") %>%
left_join(NUTS2,by="geo") %>%
left_join(EU_countries,by=c("country_code"))
data %>%
mutate(country_code=substr(geo,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(geo)==4) %>%   #only nuts 2 regions
filter(direct=="BAL") %>%
filter(unit=="EUR_HAB") %>%
filter(na_item=="B5N") %>%
left_join(NUTS2,by="geo") %>%
left_join(EU_countries,by=c("country_code"))
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx" ) %>%
rename(country_code=code,county_name=name)
EU_Countries_names_dict<- setNames(EU_countries$country_name, EU_countries$country_code)
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx" ) %>%
rename(country_code=code,county_name=name)
EU_Countries_names_dict<- setNames(EU_countries$country_name, EU_countries$country_code)
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx" ) %>%
rename(country_code=code,country_name=name)
EU_Countries_names_dict<- setNames(EU_countries$country_name, EU_countries$country_code)
data %>%
mutate(country_code=substr(geo,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(geo)==4) %>%   #only nuts 2 regions
filter(direct=="BAL") %>%
filter(unit=="EUR_HAB") %>%
filter(na_item=="B5N") %>%
left_join(NUTS2,by="geo") %>%
left_join(EU_countries,by=c("country_code"))
data %>%
mutate(country_code=substr(geo,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(geo)==4) %>%   #only nuts 2 regions
filter(direct=="BAL") %>%
filter(unit=="EUR_HAB") %>%
filter(na_item=="B5N") %>%
left_join(NUTS2,by="geo") %>%
left_join(EU_countries,by=c("country_code")) %>%
select(-c(freq,unit,direct,na_item))
data %>%
mutate(country_code=substr(geo,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(geo)==4) %>%   #only nuts 2 regions
filter(direct=="BAL") %>%  #balance
filter(unit=="EUR_HAB") %>% #eur per habitant
filter(na_item=="B5N") %>% #income
left_join(NUTS2,by="geo") %>%
left_join(EU_countries,by=c("country_code")) %>%
select(-c(freq,unit,direct,na_item)) %>%
mutate(year = year(TIME_PERIOD))
data %>%
mutate(country_code=substr(geo,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(geo)==4) %>%   #only nuts 2 regions
filter(direct=="BAL") %>%  #balance
filter(unit=="EUR_HAB") %>% #eur per habitant
filter(na_item=="B5N") %>% #income
left_join(NUTS2,by="geo") %>%
left_join(EU_countries,by=c("country_code")) %>%
mutate(year = year(TIME_PERIOD)) %>%
select(-c(freq,unit,direct,na_item,TME_PERIOD)) %>%
rename(region_code=geo,
region_name=name)
data %>%
mutate(country_code=substr(geo,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(geo)==4) %>%   #only nuts 2 regions
filter(direct=="BAL") %>%  #balance
filter(unit=="EUR_HAB") %>% #eur per habitant
filter(na_item=="B5N") %>% #income
left_join(NUTS2,by="geo") %>%
left_join(EU_countries,by=c("country_code")) %>%
mutate(year = year(TIME_PERIOD)) %>%
select(-c(freq,unit,direct,na_item,TIME_PERIOD)) %>%
rename(region_code=geo,
region_name=name)
dataset="nama_10r_2hhinc"
NUTS2<-read_excel("./dictionaries/NUTS2.xlsx" ) %>%
rename(geo=code)
data <-get_eurostat(dataset)
data %>%
mutate(country_code=substr(geo,1,2)) %>%
filter(country_code %in% EU_countries$country_code) %>%
filter(nchar(geo)==4) %>%   #only nuts 2 regions
filter(direct=="BAL") %>%  #balance
filter(unit=="EUR_HAB") %>% #eur per habitant
filter(na_item=="B5N") %>% #income
left_join(NUTS2,by="geo") %>%
left_join(EU_countries,by=c("country_code")) %>%
mutate(year = year(TIME_PERIOD)) %>%
select(-c(freq,unit,direct,na_item,TIME_PERIOD)) %>%
rename(region_code=geo,
region_name=name) -> exporting_data
save(exporting_data, file = paste0("./data/", dataset, ".RData"))
dataset="ilc_pw01"
EU_countries<-read_excel("./dictionaries/EU_countries.xlsx" ) %>%
rename(country_code=code,country_name=name)
EU_Countries_names_dict<- setNames(EU_countries$country_name, EU_countries$country_code)
data <-get_eurostat(dataset,
filters=list(geo=pull(EU_countries,code))) #read data for the 27 only
data <-get_eurostat(dataset,
filters=list(geo=pull(EU_countries,country_code))) #read data for the 27 only
sheets=c("age","isced11","indic_wb")
for (sheet in sheets) {
dict <-read_excel(paste0("./dictionaries/",dataset,".xlsx"),sheet=sheet)
replacement_dict <- setNames(dict$name, dict$code)
data <- data %>%
mutate(!!sym(sheet) := recode(!!sym(sheet), !!!replacement_dict))
##!!! splits a vector into individual arguments for a function
## !!sym() is a way to convert the string sheet into a symbol that dplyr can understand as a column name.
}
data %>%
mutate(
sex = recode(sex,"F"="Female","M"="Male","T"="Total")
) %>%
select(-c(freq,unit)) %>%
rename(indicator=indic_wb,
education=isced11)
data %>%
mutate(
sex = recode(sex,"F"="Female","M"="Male","T"="Total")
) %>%
select(-c(freq,unit)) %>%
rename(indicator=indic_wb,
education=isced11,
county_code=geo) %>%
left_join(EU_countries,by=c("country_code"))
data %>%
mutate(
sex = recode(sex,"F"="Female","M"="Male","T"="Total")
) %>%
select(-c(freq,unit)) %>%
rename(indicator=indic_wb,
education=isced11,
country_code=geo) %>%
left_join(EU_countries,by=c("country_code"))
data %>%
mutate(
sex = recode(sex,"F"="Female","M"="Male","T"="Total")
) %>%
select(-c(freq,unit)) %>%
rename(indicator=indic_wb,
education=isced11,
country_code=geo) %>%
left_join(EU_countries,by=c("country_code")) %>%
mutate(year = year(time))
data %>%
mutate(
sex = recode(sex,"F"="Female","M"="Male","T"="Total")
) %>%
rename(indicator=indic_wb,
education=isced11,
country_code=geo) %>%
left_join(EU_countries,by=c("country_code")) %>%
mutate(year = year(time)) %>%
select(-c(freq,unit,time))
data %>%
mutate(
sex = recode(sex,"F"="Female","M"="Male","T"="Total")
) %>%
rename(indicator=indic_wb,
education=isced11,
country_code=geo) %>%
left_join(EU_countries,by=c("country_code")) %>%
mutate(year = year(time)) %>%
select(-c(freq,unit,time)) -> exporting_data
# Load data
unemployment <- read.csv("http://datasets.flowingdata.com/unemployment-rate-1948-2010.csv", sep=",")
unemployment[1:10,]
# Plain scatter plot
plot(1:length(unemployment$Value), unemployment$Value)
# Fitted linear line
lines(c(1,746), c(4.889523,6.42593))
# Scatter plot with loess
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value)
# Fix y-axis to start at zero
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value, ylim=c(0,11), degree=2)
# Change color
scatter.smooth(x=1:length(unemployment$Value), y=unemployment$Value, ylim=c(0,11), degree=2, col="#CCCCCC", span=0.5)
source("C:/Users/franc/OneDrive/Documentos/proyectos/GDP_visualization/sankey_diagram_v1.R", echo=TRUE)
flujo<-read_excel("./data.xlsx",sheet="flujo")
nodes <- read_excel("./data.xlsx",sheet="list")
setwd("C:/Users/franc/OneDrive/Documentos/proyectos/GDP_visualization")
source("C:/Users/franc/OneDrive/Documentos/proyectos/GDP_visualization/sankey_diagram_v1.R", echo=TRUE)
Version()
R.Version()
library(installr)
updateR()
source("C:/Users/franc/OneDrive/Documentos/proyectos/GDP_visualization/sankey_diagram_v1.R", echo=TRUE)
if(!require(networkD3)) install.packages("networkD3")
library(networkD3)
rm(PAQUETES, el)
flujo<-read_excel("./data.xlsx",sheet="flujo")
nodes <- read_excel("./data.xlsx",sheet="list")
source_index<-list()
ii<-1
for (element in flujo$Source) {
indices <- which(nodes == element)
source_index[[ii]] <- indices-1
ii<-ii+1
}
target_index<-list()
ii<-1
for (element in flujo$target) {
indices <- which(nodes == element)
target_index[[ii]] <- indices-1
ii<-ii+1
}
#create links dataframe
links<-flujo %>%
mutate(source=as.numeric(source_index),
target=as.numeric(target_index)
)%>%
select(-Source)
myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
colourScale =myColors,
sinksRight=FALSE
)
print(sankey)
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE
)
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE
)
source("C:/Users/franc/OneDrive/Documentos/proyectos/GDP_visualization/sankey_diagram_v1.R", echo=TRUE)
source("C:/Users/franc/OneDrive/Documentos/proyectos/GDP_visualization/sankey_diagram_v1.R", echo=TRUE)
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE
)
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE
)
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE
)
rm(list = ls())
PAQUETES <- c("dplyr","tidyverse","ggplot2","readxl","network3D")
for (el in PAQUETES){
if (!require(el, character.only = TRUE)) {
install.packages(el, repos = "https://cloud.r-project.org")
require(el, character.only = TRUE)
}
}
if(!require(networkD3)) install.packages("networkD3")
library(networkD3)
rm(PAQUETES, el)
#
flujo<-read_excel("./data.xlsx",sheet="flujo")
nodes <- read_excel("./data.xlsx",sheet="list")
source_index<-list()
ii<-1
for (element in flujo$Source) {
indices <- which(nodes == element)
source_index[[ii]] <- indices-1
ii<-ii+1
}
target_index<-list()
ii<-1
for (element in flujo$target) {
indices <- which(nodes == element)
target_index[[ii]] <- indices-1
ii<-ii+1
}
#create links dataframe
links<-flujo %>%
mutate(source=as.numeric(source_index),
target=as.numeric(target_index)
)%>%
select(-Source)
View(links)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE,
iterations = 0
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE,
iterations = 5 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE,
iterations = 20 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE,
iterations = 0 #allows to manual order of nodes as in the nodes df
)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE,
iterations = 0 #allows to manual order of nodes as in the nodes df
)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE,
iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
flujo<-read_excel("./data.xlsx",sheet="flujo")
nodes <- read_excel("./data.xlsx",sheet="list")
source_index<-list()
ii<-1
for (element in flujo$Source) {
indices <- which(nodes == element)
source_index[[ii]] <- indices-1
ii<-ii+1
}
target_index<-list()
ii<-1
for (element in flujo$target) {
indices <- which(nodes == element)
target_index[[ii]] <- indices-1
ii<-ii+1
}
#create links dataframe
links<-flujo %>%
mutate(source=as.numeric(source_index),
target=as.numeric(target_index)
)%>%
select(-Source)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 8,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE,
iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 10,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE,
iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'ME',
fontSize = 10,
nodeWidth = 20,
# colourScale =myColors,
sinksRight=FALSE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)

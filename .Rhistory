sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory10)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeTableau10)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeAccent)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory10)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory40)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
myColors <- 'd3.scaleOrdinal().range(["red", "green", "blue"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale =myColors,
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
myColors <- 'd3.scaleOrdinal(["a", "b", "c"], d3.schemeTableau10)'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale =myColors,
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
myColors <- 'd3.scaleOrdinal(["a", "b", "c"], d3.schemeTableau10)'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale =myColors,
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
myColors <- 'd3.scaleLinear([0, 100], ["red", "blue"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale =myColors,
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
myColors <- 'd3.scaleSequential([0, 100], d3.interpolateBlues)'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale =myColors,
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
myColors <- 'd3.scaleOrdinal().domain(["M", "W", "sources"]) .range(["#5485AB", "#BA4682", "#646363"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
myColors <- 'd3.scaleOrdinal().domain(["M", "W"]) .range(["#5485AB", "#BA4682"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
myColors <- 'd3.scaleOrdinal().domain(["M", "W"]) .range(["#5485AB", "#BA4682"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale =myColors,
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
myColors <- 'd3.scaleOrdinal().range(["red", "green", "blue"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale =myColors,
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
?sankeyNetwork()
myColors <- 'd3.scaleOrdinal().domain(["M", "W"]) .range(["#5485AB", "#BA4682"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory10)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
?sankeyNetwork()
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
sankeyNetworkOutput(sankey)
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeAccent)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W"]) .range(["#5485AB", "#BA4682"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=TRUE,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W"]) .range(["#5485AB", "#BA4682"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 30,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=F,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W"]) .range(["#5485AB", "#BA4682"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 20,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=F,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
source("C:/Users/franc/OneDrive/Documentos/proyectos/GDP_visualization/sankey_diagram_v1.R", echo=TRUE)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W"]) .range(["#5485AB", "#BA4682"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 2,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=F,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W"]) .range(["#5485AB", "#BA4682"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 0,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=F,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
# myColors <- 'd3.scaleOrdinal().domain(["M", "W"]) .range(["#5485AB", "#BA4682"])'
# Create the Sankey diagram
sankey <- sankeyNetwork(Links = links,
Nodes = nodes,
Source = "source",
Target = "target",
Value = "Value",
NodeID = "name",
units = 'Milliones de Euros',
fontSize = 12,
nodeWidth = 20,
colourScale ="d3.scaleOrdinal(d3.schemeCategory20)",
sinksRight=F,
# iterations = 0 #allows to manual order of nodes as in the nodes df
)
print(sankey)
HEcombined <- HairEyeColor[ , ,1] + HairEyeColor[ , ,2\]
HEcombined <- HairEyeColor[ , ,1] + HairEyeColor[ , ,2]
HEcombined
HEcombined/sum(HEcombined)
chiOut <- chisq.test(HEcombined)
chiOut
chiOut\$residuals
chiOut$residuals
library(BayesFactor)
ctOut <- contingencyTableBF(HEcombined, sampleType="poisson",
posterior=FALSE, iterations=10000)
ctOut
rm(list = ls())
PAQUETES <- c("dplyr","tidyverse")
for (el in PAQUETES){
if (!require(el, character.only = TRUE)) {
install.packages(el)
require(el, character.only = TRUE)
}
}
rm(PAQUETES, el)
data <- read_csv("AutoSP2024.csv")
str(data)
Auto <- read_csv("AutoSP2024.csv")
str(Auto)
corauto<-cor(Auto[,4:7])
round(corauto,digits=2)
Auto %>% pull(highwaympg) %>% hist()
Auto %>% pull(highwaympg) %>% hist()
Auto %>% pull(price) %>% hist()
Auto %>%
select(highwaympg,price) %>%
plot()
Auto %>%
select(price,highwaympg) %>%
plot()
Auto %>%
select(price,highwaympg) %>%
cor.test()
Auto %>%
pull(price,highwaympg) %>%
cor.test()
cor.test(Auto$highwaympg,Auto$price)
cor.test(Auto$highwaympg,Auto$price, method="pearson")
cor.test(Auto$highwaympg,Auto$price, method="pearson")
bfCorTest<-function(x,y)
{
zx<-scale(x)
zy<-scale(y)
zData<-data.frame(x=zx,rhoNot0=zy)
bfOut<-generalTestBF(x~rhoNot0,data = zData)
mcmcOut<-posterior(bfOut,iterations = 10000)
print(summary(mcmcOut[,"rhoNot0"]))
return(bfOut)
}
bfCorTest(Auto$highwaympg,Auto$price)
rm(list = ls())
PAQUETES <- c("dplyr","tidyverse","BayesFactor")
for (el in PAQUETES){
if (!require(el, character.only = TRUE)) {
install.packages(el)
require(el, character.only = TRUE)
}
}
rm(PAQUETES, el)
Auto <- read_csv("AutoSP2024.csv")
str(Auto)
bfCorTest<-function(x,y)
{
zx<-scale(x)
zy<-scale(y)
zData<-data.frame(x=zx,rhoNot0=zy)
bfOut<-generalTestBF(x~rhoNot0,data = zData)
mcmcOut<-posterior(bfOut,iterations = 10000)
print(summary(mcmcOut[,"rhoNot0"]))
return(bfOut)
}
bfCorTest(Auto$highwaympg,Auto$price)
